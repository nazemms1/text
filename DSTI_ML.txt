import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv('stroke_data.csv')
print("Dataset Shape:", df.shape)
print("\nMissing Values:")
print(df.isnull().sum())
print("\nBasic Statistics:")
print(df.describe())

# Create plots
plt.figure(figsize=(15, 10))

plt.subplot(2, 2, 1)
sns.countplot(data=df, x='stroke', palette=['#ff9999', '#99ff99'])
plt.title('Distribution of Stroke Cases', pad=20, fontsize=12)
plt.xlabel('Stroke (0: No, 1: Yes)')
plt.ylabel('Count')

plt.subplot(2, 2, 2)
sns.countplot(data=df, x='gender', hue='stroke', palette=['#ff9999', '#99ff99'])
plt.title('Stroke Cases by Gender', pad=20, fontsize=12)
plt.xlabel('Gender')
plt.ylabel('Count')

plt.subplot(2, 2, 3) 
sns.boxplot(data=df, x='stroke', y='age', palette=['#ff9999', '#99ff99'])
plt.title('Age Distribution by Stroke', pad=20, fontsize=12)
plt.xlabel('Stroke (0: No, 1: Yes)')
plt.ylabel('Age')

plt.subplot(2, 2, 4)
health_data = df.groupby(['heart_disease', 'hypertension'])['stroke'].mean().reset_index()
sns.barplot(data=health_data, x='heart_disease', y='stroke', hue='hypertension', palette=['#ff9999', '#99ff99'])
plt.title('Stroke Rate by Heart Disease and Hypertension', pad=20, fontsize=12)
plt.xlabel('Heart Disease (0: No, 1: Yes)')
plt.ylabel('Stroke Rate')

plt.tight_layout(pad=2.0)
plt.show()

df['bmi'].fillna(df['bmi'].mean(), inplace=True)

categorical_columns = ['gender', 'ever_married', 'work_type', 'Residence_type', 'smoking_status']
df_encoded = pd.get_dummies(df, columns=categorical_columns)

df_encoded['age_group'] = pd.cut(df['age'], bins=[0, 20, 40, 60, 80, 100], labels=['0-20', '21-40', '41-60', '61-80', '80+'])
df_encoded['bmi_category'] = pd.cut(df['bmi'], bins=[0, 18.5, 25, 30, float('inf')], labels=['Underweight', 'Normal', 'Overweight', 'Obese'])
df_encoded['health_risk'] = df['hypertension'] + df['heart_disease']

X = df_encoded.drop(['stroke', 'id', 'age_group', 'bmi_category'], axis=1)
y = df_encoded['stroke']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestClassifier(n_estimators=100, max_depth=10, min_samples_split=5, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print("\nModel Performance:")
print("-----------------")
print(classification_report(y_test, y_pred))

feature_importance = pd.DataFrame({
    'feature': X.columns,
    'importance': model.feature_importances_
}).sort_values('importance', ascending=False)

plt.figure(figsize=(10, 6))
sns.barplot(data=feature_importance.head(10), x='importance', y='feature', palette=['#ff9999', '#ff9999', '#ff9999', '#99ff99', '#99ff99', '#99ff99', '#ff9999', '#ff9999', '#99ff99', '#99ff99'])
plt.title('Top 10 Important Features')
plt.xlabel('Importance Score')
plt.ylabel('Features')
plt.tight_layout()
plt.show()

import joblib
joblib.dump(model, 'stroke_model.joblib')
 
def predict_stroke_risk(patient_data):
    patient_df = pd.DataFrame([patient_data])
    probability = model.predict_proba(patient_df)[0][1]
    return probability

 
 
